{"version":3,"sources":["constants/images.js","components/shared/svg/Logo.jsx","components/shared/svg/QuestionField.jsx","components/shared/callouts/QuestionCallout.jsx","components/shared/svg/SharpComment.jsx","components/shared/callouts/SharpCallout.js","contexts/ProgressContext.js","components/shared/svg/ButtonBackground.jsx","components/shared/buttons/Button.jsx","components/shared/buttons/StartButton.jsx","colorTypes.config.js","components/shared/svg/StartTitle.jsx","components/shared/callouts/TestTitleCallout.jsx","components/Intro.jsx","answerTypes.config.js","questions.config.js","utils/getQuestionbyId.js","components/shared/buttons/AnswerButton.jsx","components/QuestionWrapper.jsx","components/questions/Question1/Question1.jsx","components/questions/Question2/Question2.jsx","components/questions/Question3/Question3.jsx","components/questions/Question4/Question4.jsx","components/questions/Question5/Question5.jsx","components/questions/Question6/Question6.jsx","components/questions/Question7/Question7.jsx","components/questions/Question8/Question8.jsx","components/questions/Question9/Question9.jsx","components/questions/Question10/Question10.jsx","components/questions/Question11/Question11.jsx","components/shared/buttons/ShareButton.jsx","components/shared/buttons/RestartButton.jsx","components/Final.jsx","utils/checkResult.js","components/shared/svg/SmoothComment.jsx","components/shared/callouts/SmoothCallout.jsx","components/shared/svg/Next.jsx","components/shared/buttons/NextButton.jsx","components/ExplanationTitle.jsx","components/ExplanationWrapper.jsx","components/questions/Question1/QuestionExplanation1.jsx","components/questions/Question2/QuestionExplanation2.jsx","components/questions/Question3/QuestionExplanation3.jsx","components/questions/Question4/QuestionExplanation4.jsx","components/questions/Question5/QuestionExplanation5.jsx","components/questions/Question6/QuestionExplanation6.jsx","components/questions/Question7/QuestionExplanation7.jsx","components/questions/Question8/QuestionExplanation8.jsx","components/questions/Question9/QuestionExplanation9.jsx","components/questions/Question10/QuestionExplanation10.jsx","components/questions/Question11/QuestionExplanation11.jsx","screens.config.js","components/ScreenWrapper.jsx","utils/preloadImage.js","components/App.js","index.js"],"names":["question1","process","question2","question3","question4","question5","question6","question7","question8","question9","question10","question11","Logo","xmlns","width","height","viewBox","id","data-name","y","href","QuestionField","Wrapper","styled","div","TextWrapper","Text","p","styles","QuestionWrapper","QuestionCallout","props","className","text","SharpComment","CalloutWrapper","SharpCallout","ProgressContext","React","createContext","ProgressProvider","Provider","Consumer","Background","index","Border","BlackBorder","ButtonBackground","backColor","mainColor","version","preserveAspectRatio","fill","transform","stroke","d","color","textColor","Button","INITIAL_STATE","main","back","useState","setMainColor","setBackColor","setTextColor","setIndex","resetColors","onClick","changeColors","onBlur","StartButton","setNext","useContext","setTimeout","ColorTypes","StartTitle","TitleWrapper","TestTitleCallout","ImagesWrapper","ImageBackground","LogoWrapper","ImageWrapper","Image","img","DescriptionField","MotivationText","ButtonWrapper","Intro","src","AnswerTypes","questions","correct","description","getQuestionById","find","question","AnswerButton","setExplanation","setScore","setAnswer","prev","Question","image","Question1","Question2","Question3","Question4","Question5","Question6","Question7","Question8","Question9","Question10","Question11","StyledButton","ShareButton","url","window","location","protocol","host","pathname","join","resolve","queryParams","URLSearchParams","append","link","toString","action","target","open","RestartButton","setCurrentScreenIndex","Title","h1","Description","Link","a","Final","score","total","length","result","buttonText","component","checkResult","SmoothComment","SmoothCallout","Next","fillRule","ExplanationTitle","backgroundColor","ExplanationWrapper","answer","children","FirstDescription","SecondDescription","QuestionExplanation1","QuestionExplanation2","QuestionExplanation3","QuestionExplanation4","QuestionExplanation5","QuestionExplanation6","QuestionExplanation7","QuestionExplanation8","QuestionExplanation9","QuestionExplanation10","ScreenType","screens","name","type","preloadImages","explanation","ComponentWrapper","ScreenWrapper","screenParam","search","get","currentScreenIndex","isExplanation","setIsExplanation","screen","useEffect","clears","map","document","createElement","style","position","top","left","body","appendChild","removeChild","preloadImage","forEach","clear","Component","progressProviderValue","value","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9de14d3b.chunk.js","sourcesContent":["const question1 = process.env.PUBLIC_URL + \"/static/images/question1.png\";\nconst question2 = process.env.PUBLIC_URL + \"/static/images/question2.png\";\nconst question3 = process.env.PUBLIC_URL + \"/static/images/question3.png\";\nconst question4 = process.env.PUBLIC_URL + \"/static/images/question4.png\";\nconst question5 = process.env.PUBLIC_URL + \"/static/images/question5.png\";\nconst question6 = process.env.PUBLIC_URL + \"/static/images/question6.png\";\nconst question7 = process.env.PUBLIC_URL + \"/static/images/question7.png\";\nconst question8 = process.env.PUBLIC_URL + \"/static/images/question8.png\";\nconst question9 = process.env.PUBLIC_URL + \"/static/images/question9.png\";\nconst question10 = process.env.PUBLIC_URL + \"/static/images/question10.png\";\nconst question11 = process.env.PUBLIC_URL + \"/static/images/question11.png\";\n\nconst introImage = process.env.PUBLIC_URL + \"/static/images/intro.png\";\n\nconst shareImage = process.env.PUBLIC_URL + \"/static/images/shareImage.jpg\";\n\nconst iphone = process.env.PUBLIC_URL + \"/static/images/iphone-mockup.png\";\n\nexport {\n  question1,\n  question2,\n  question3,\n  question4,\n  question5,\n  question6,\n  question7,\n  question8,\n  question9,\n  question10,\n  question11,\n  introImage,\n  shareImage,\n  iphone\n};\n","import React from \"react\";\nconst Logo = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"auto\"\n      height=\"auto\"\n      viewBox=\"0 0 333 197\"\n    >\n      <image\n        id=\"logo\"\n        data-name=\"logo\"\n        y=\"-52\"\n        width=\"100%\"\n        height=\"100%\"\n        href=\"data:img/png;base64,\"\n      />\n    </svg>\n  );\n};\n\nexport default Logo;\n","import React from \"react\";\n\nconst QuestionField = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"auto\"\n      height=\"auto\"\n      viewBox=\"0 0 535 356\"\n    >\n      <image\n        id=\"Прямоугольник_4\"\n        data-name=\"Прямоугольник 4\"\n        width=\"100%\"\n        height=\"100%\"\n        href=\"data:img/png;base64,\"\n      />\n    </svg>\n  );\n};\n\nexport default QuestionField;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport QuestionField from \"../svg/QuestionField\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  line-height: 1.2em;\n  display: flex;\n  justify-content: center;\n  z-index: 1;\n  \n   @media screen and (min-width: 640px) {\n    height: 105px;\n    font-size: 30px;\n    line-height: 0.9em;\n    width: 220px;\n    \n    @media (max-height:700px) {\n          height: 13.5vh;\n          width: 28vh;\n          font-size: 24px;\n    }\n    @media (max-height:500px) {\n        font-size: 18px;\n    }\n  }\n  \n`;\n\nconst TextWrapper = styled.div`\n  position: relative;\n  height: inherit;\n  width: 70%;\n  text-align: left;\n  z-index: 3;\n  @media screen and (min-width: 640px) {\n    \n    @media (max-height:700px) {\n        width: 80%;\n    }\n  }\n`;\n\nconst Text = styled.p`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  margin-top: -5%;\n  ${({ styles }) => styles};\n`;\nconst QuestionWrapper = styled.div`\n  position: absolute;\n  height: inherit;\n  width: 100%;\n  top: 0;\n  z-index: 2;\n`;\n\nconst QuestionCallout = (props) => {\n  return (\n    <Wrapper className={props.className}>\n      <QuestionWrapper>\n        <QuestionField />\n      </QuestionWrapper>\n      <TextWrapper>\n        <Text>{props.text}</Text>\n      </TextWrapper>\n    </Wrapper>\n  );\n};\n\nexport default QuestionCallout;\n","import React from \"react\";\n\nconst SharpComment = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"auto\"\n      height=\"auto\"\n      viewBox=\"0 0 583 481\"\n    >\n      <image\n        id=\"Sharp\"\n        data-name=\"Sharp\"\n        width=\"100%\"\n        height=\"100%\"\n        href=\"data:img/png;base64,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\"\n      />\n    </svg>\n  );\n};\n\nexport default SharpComment;\n","import React from \"react\";\nimport SharpComment from \"../svg/SharpComment\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  margin: 0 auto;\n  width: 92vw;\n  max-width: 360px;\n  line-height: 1em;\n  z-index: 1;\n  color: black;\n`;\nconst CalloutWrapper = styled.div`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  z-index: 2;\n`;\nconst TextWrapper = styled.div`\n  position: relative;\n  display: flex;\n  height: 100%;\n  align-items: center;\n  text-align: left;\n  z-index: 3;\n  width: 80%;\n  max-width: 250px;\n  margin: 0 auto;\n  @media screen and (max-width: 360px) {\n    width: 70vw;\n  }\n  @media screen and (max-height: 550px) {\n    width: 47vw;\n    @media screen and (max-width: 300px) {\n      width: 50vw;\n    }\n  }\n`;\n\nconst Text = styled.p`\n  position: absolute;\n  top: 50%;\n  left: 53.5%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  margin-top: -15%;\n  @media screen and (max-height: 550px) {\n    margin-top: -20%;\n  }\n  @media screen and (max-width: 320px) {\n    margin-top: -15%;\n  }\n  \n   @media screen and (min-width:640px) and (max-height: 500px) {\n      margin-top: -16%;\n   }\n`;\nconst SharpCallout = (props) => {\n  return (\n    <Wrapper className={props.className}>\n      <CalloutWrapper>\n        <SharpComment />\n      </CalloutWrapper>\n      <TextWrapper className={\"text-wrapper\"}>\n        <Text>{props.text}</Text>\n      </TextWrapper>\n    </Wrapper>\n  );\n};\n\nexport default SharpCallout;\n","import React from \"react\";\n\nexport const ProgressContext = React.createContext(null);\n\nexport const ProgressProvider = ProgressContext.Provider;\nexport const ProgressConsumer = ProgressContext.Consumer;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  height: 11vh;\n  width: 45vw;\n  max-width: 180px;\n  @media screen and (min-width: 640px) {\n    width: 140px;\n    height: 70px;\n    @media (max-height: 700px) {\n      height: 9vh;\n      width: 19vh;\n    }\n  }\n`;\n\nconst Background = styled.div`\n  position: absolute;\n  height: 9.4vh;\n  width: 43.09vw;\n  max-width: 173px;\n  top: 1.85vw;\n  left: 1.5vw;\n  z-index: ${(props) => props.index};\n\n  @media screen and (min-width: 500px) {\n    top: 8px;\n    left: 6px;\n  }\n  @media screen and (max-height: 320px) {\n    top: 2px;\n    left: 3px;\n  }\n\n  @media screen and (min-width: 640px) {\n    height: 64px;\n    width: 128px;\n    top: 4px;\n    left: 9px;\n    \n    @media (max-height: 700px) {\n      height: 7.75vh;\n      top: 0.8vh;\n      left: 1.44vh;\n      width: 16.6vh;\n    }\n  }\n`;\n\nconst Border = styled.div`\n  position: absolute;\n  height: 10.6vh;\n  width: 45vw;\n  max-width: 180px;\n  top: 0.11vh;\n  left: 0;\n\n  @media screen and (min-width: 640px) {\n    width: 140px;\n    height: 67px;\n    top: 1px;\n    left: 1px;\n    @media (max-height: 700px) {\n      height: 9vh;\n      width: 17vh;\n      top: 0;\n      left: 1vh;\n    }\n  }\n`;\n\nconst BlackBorder = styled(Border)`\n  height: 11vh;\n  top: 0;\n  @media screen and (min-width: 640px) {\n    height: 70px;\n    left: 0;\n    @media (max-height: 700px) {\n      height: 9vh;\n      width: 19vh;\n    }\n  }\n`;\n\nconst ButtonBackground = (props) => {\n  const { index, backColor, mainColor } = { ...props };\n  return (\n    <Wrapper>\n      <Background index={index}>\n        <svg\n          version=\"1.0\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"auto\"\n          height=\"100%\"\n          viewBox=\"0 0 280.000000 130.000000\"\n          preserveAspectRatio=\"xMidYMid meet\"\n          fill={backColor}\n        >\n          <g\n            transform=\"translate(0.000000,130.000000) scale(0.100000,-0.100000)\"\n            stroke=\"none\"\n          >\n            <path\n              d=\"M1135 1294 c-16 -2 -70 -9 -120 -15 -402 -49 -784 -212 -930 -396\n                    -25 -32 -54 -82 -65 -111 -27 -70 -27 -174 0 -244 89 -238 463 -429 1000 -510\n                    115 -18 645 -18 760 0 359 54 642 155 824 293 81 61 149 146 176 217 27 70 27\n                    174 0 244 -86 230 -448 421 -957 504 -93 15 -609 29 -688 18z\"\n            />\n          </g>\n        </svg>\n      </Background>\n      <Border>\n        <svg\n          version=\"1.0\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"auto\"\n          height=\"100%\"\n          viewBox=\"0 0 290.000000 147.000000\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        >\n          <g\n            transform=\"translate(0.000000,147.000000) scale(0.100000,-0.100000)\"\n            fill={mainColor}\n            stroke=\"none\"\n          >\n            <path\n              d=\"M1090 1449 c-63 -10 -131 -20 -150 -22 -19 -2 -51 -9 -70 -15 -19 -6\n                -87 -25 -150 -43 -63 -18 -119 -36 -124 -41 -6 -4 -16 -8 -23 -8 -22 0 -254\n                -118 -273 -140 -3 -3 -26 -22 -52 -43 -54 -43 -117 -106 -135 -133 -18 -26\n                -76 -147 -78 -159 -7 -50 -19 -95 -26 -95 -5 0 -9 -23 -9 -50 0 -64 44 -157\n                105 -223 25 -26 45 -52 45 -57 0 -6 6 -10 13 -10 6 -1 30 -19 52 -40 22 -22\n                44 -40 49 -40 4 0 25 -13 45 -29 39 -30 214 -117 296 -146 28 -10 54 -22 59\n                -26 6 -5 18 -9 28 -9 10 0 26 -4 36 -9 9 -5 51 -19 92 -31 41 -12 85 -26 98\n                -31 13 -5 37 -9 53 -9 17 0 38 -4 48 -10 36 -19 84 -22 416 -27 351 -5 335 -6\n                575 37 59 10 157 38 180 50 10 6 28 10 39 10 12 0 21 5 21 10 0 6 7 10 17 10\n                33 0 221 92 283 140 19 14 56 42 81 61 25 19 65 57 88 84 22 28 49 58 58 67 9\n                10 14 21 10 24 -9 9 -73 -33 -96 -62 -24 -31 -89 -78 -150 -110 -25 -14 -53\n                -29 -61 -34 -99 -59 -363 -132 -590 -163 -340 -47 -691 -35 -1005 34 -61 13\n                -290 87 -325 104 -226 112 -361 223 -427 352 -24 47 -30 73 -30 119 -1 32 3\n                65 7 74 5 8 20 39 35 69 30 61 100 141 123 141 9 0 12 3 9 7 -8 7 150 113 168\n                113 7 0 23 9 37 19 37 30 315 119 441 142 344 64 851 44 1195 -46 205 -54 397\n                -136 524 -223 80 -55 178 -177 178 -221 0 -11 5 -21 11 -23 6 -2 13 -25 16\n                -51 5 -41 8 -47 29 -47 22 0 24 4 24 55 0 30 -4 55 -8 55 -4 0 -14 17 -21 38\n                -13 36 -96 154 -113 160 -4 2 -8 10 -8 18 0 8 -6 14 -14 14 -8 0 -26 14 -39\n                30 -14 17 -30 30 -34 30 -5 0 -15 9 -23 20 -8 11 -18 20 -23 20 -5 0 -39 20\n                -76 44 -92 60 -181 104 -276 137 -22 8 -42 16 -45 19 -7 7 -91 34 -170 55 -36\n                9 -81 21 -100 26 -19 5 -113 21 -208 34 -217 31 -473 33 -652 4z\"\n            />\n          </g>\n        </svg>\n      </Border>\n      <BlackBorder>\n        <svg\n          version=\"1.0\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"auto\"\n          height=\"100%\"\n          viewBox=\"0 0 290.000000 152.000000\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        >\n          <g\n            transform=\"translate(0.000000,152.000000) scale(0.100000,-0.100000)\"\n            fill=\"#000000\"\n            stroke=\"none\"\n          >\n            <path\n              d=\"M1096 1504 c-311 -41 -601 -138 -796 -265 -98 -64 -211 -183 -248\n                            -260 -17 -36 -36 -85 -41 -109 -55 -240 113 -476 454 -636 694 -326 1577 -304\n                            2123 53 96 62 224 198 261 275 88 186 54 352 -107 520 -191 200 -526 351 -917\n                            414 -142 23 -582 28 -729 8z m798 -113 c418 -68 691 -182 858 -360 36 -38 78\n                            -95 94 -127 26 -52 29 -70 29 -154 0 -87 -3 -101 -32 -160 -99 -200 -350 -348\n                            -733 -434 -492 -109 -1064 -95 -1454 36 -332 111 -552 299 -595 510 -64 308\n                            361 609 974 692 66 9 134 18 150 20 17 2 154 3 305 1 220 -2 301 -7 404 -24z\"\n            />\n          </g>\n        </svg>\n      </BlackBorder>\n    </Wrapper>\n  );\n};\n\nexport default ButtonBackground;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ButtonBackground from \"../svg/ButtonBackground\";\n\nconst Wrapper = styled.div`\n  margin-bottom: 4vh;\n  font-size: 25px;\n  position: relative;\n  text-shadow: 0.5px -1px 0px ${(props) => props.color};\n  color: ${(props) => props.textColor};\n   &:hover{\n      cursor: pointer;\n    }\n      }\n    @media screen and (max-height:550px){\n    font-size: 15px;\n  }\n`;\n\nconst TextWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n  z-index: 11;\n`;\n\nconst Button = (props) => {\n\n  const INITIAL_STATE= {\n    main: props.color,\n    back: '#fff',\n    text: '#000',\n    index: 0\n  }\n  const [mainColor, setMainColor] = useState(INITIAL_STATE.main);\n  const [backColor, setBackColor] = useState(INITIAL_STATE.back);\n  const [textColor, setTextColor] = useState(INITIAL_STATE.text);\n  const [index, setIndex] = useState(INITIAL_STATE.index);\n\n  const resetColors = () => {\n    setMainColor(INITIAL_STATE.main);\n    setBackColor(INITIAL_STATE.back);\n    setTextColor(INITIAL_STATE.text);\n    setIndex(INITIAL_STATE.index);\n  }\n  const changeColors = () => {\n    const main = mainColor;\n    if (main === INITIAL_STATE.main) {\n      setMainColor(backColor);\n      setBackColor(main);\n      setTextColor(\"#fff\");\n      setIndex(10);\n    }\n    else {\n      resetColors();\n    }\n  };\n\n  const onChange = () => {\n    if (!!props.onClick) {\n      changeColors();\n      props.onClick();\n    }\n  };\n\n  return (\n    <Wrapper\n      onClick={onChange}\n      onBlur={resetColors}\n      className={props.className}\n      color={props.color}\n      textColor={textColor}\n    >\n      <ButtonBackground\n        mainColor={mainColor}\n        backColor={backColor}\n        index={index}\n      />\n      <TextWrapper>\n        <p>{props.text}</p>\n      </TextWrapper>\n    </Wrapper>\n  );\n};\nexport default Button;\n","import React, { useContext } from \"react\";\nimport { ProgressContext } from \"../../../contexts/ProgressContext\";\nimport Button from \"./Button\";\n\nconst StartButton = (props) => {\n  const { setNext } = useContext(ProgressContext);\n\n  const onStart = () => {\n    setTimeout(() => setNext(), 300);\n  };\n\n  return <Button text={props.text} onClick={onStart} color={props.color} />;\n};\n\nexport default StartButton;\n","export const ColorTypes = {\n  Truth: \"#a6c351\",\n  Falsity: \"#e72627\",\n  Common: \"#33aafd\",\n};\n","import React from \"react\";\n\nconst StartTitle = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"auto\"\n      height=\"auto\"\n      viewBox=\"0 0 426 232\"\n    >\n      <image\n        id=\"Векторный_смарт-объект\"\n        data-name=\"Векторный смарт-объект\"\n        width=\"100%\"\n        height=\"100%\"\n        href=\"data:img/png;base64,\"\n      />\n    </svg>\n  );\n};\nexport default StartTitle;\n","import styled from \"styled-components\";\nimport React from \"react\";\nimport StartTitle from \"../svg/StartTitle\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  line-height: 1em;\n  display: flex;\n  justify-content: center;\n  z-index: 1;\n  width: 63.2vw;\n  max-width: 225px;\n  height: 18.6vh;\n  max-height: 180px;\n  font-size: 34px;\n  @media screen and (max-width: 360px) {\n    font-size: 26px;\n  }\n\n  @media screen and (max-height: 550px) {\n    font-size: 20px;\n  }\n  @media screen and (max-height: 350px) {\n    font-size: 14px;\n  }\n\n  @media screen and (min-width: 640px) {\n    height: 105px;\n    font-size: 30px;\n    line-height: 0.9em;\n    width: 220px;\n    \n    @media (max-height:700px) {\n          height: 13.5vh;\n          width: 28vh;\n          font-size: 24px;\n    }\n    @media (max-height:500px) {\n        font-size: 18px;\n    }\n  }\n`;\n\nconst TextWrapper = styled.div`\n  position: relative;\n  height: inherit;\n  width: 70%;\n  text-align: left;\n  z-index: 3;\n`;\n\nconst Text = styled.p`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  margin-top: -5%;\n  text-align: center;\n  width: min-content;\n`;\nconst TitleWrapper = styled.div`\n  position: absolute;\n  height: inherit;\n  width: 100%;\n  top: 0;\n  z-index: 2;\n`;\n\nconst TestTitleCallout = (props) => {\n  return (\n    <Wrapper className={props.className}>\n      <TitleWrapper>\n        <StartTitle />\n      </TitleWrapper>\n      <TextWrapper>\n        <Text>{props.text}</Text>\n      </TextWrapper>\n    </Wrapper>\n  );\n};\n\nexport default TestTitleCallout;\n","import React from \"react\";\nimport { introImage } from \"../constants/images\";\nimport Logo from \"./shared/svg/Logo\";\nimport styled from \"styled-components\";\nimport QuestionCallout from \"./shared/callouts/QuestionCallout\";\nimport SharpCallout from \"./shared/callouts/SharpCallout\";\nimport StartButton from \"./shared/buttons/StartButton\";\nimport { ColorTypes } from \"../colorTypes.config\";\nimport TestTitleCallout from \"./shared/callouts/TestTitleCallout\";\n\nconst Wrapper = styled.div`\n  height: 100%;\n`;\n\nconst ImagesWrapper = styled.div`\n  position: relative;\n  padding-top: 2vh;\n  height: 35%;\n`;\nconst ImageBackground = styled.div`\n  position: absolute;\n  height: 35.5vh;\n  right: 0;\n  top: 0;\n  left: 0;\n  background-color: white;\n  @media screen and (min-width: 640px) {\n    height: 35%;\n  }\n`;\nconst LogoWrapper = styled.div`\n  width: 58.6vw;\n  max-width: 200px;\n  max-height: 50px;\n  @media screen and (min-width: 640px) {\n    width: 50%;\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  position: absolute;\n  top: 12.45vh;\n  height: 23vh;\n  z-index: 0;\n  width: 100%;\n  max-width: 400px;\n  @media screen and (min-width: 640px) {\n    top: 56px;\n    height: initial;\n  }\n`;\nconst Image = styled.img`\n  width: inherit;\n  height: inherit;\n`;\n\nconst TitleWrapper = styled.div`\n  width: fit-content;\n  margin: -7vh auto 0;\n\n  @media screen and (max-height: 750px) {\n    margin-top: -10vh;\n  }\n  @media screen and (min-width: 640px) {\n    margin-top: -6vh;\n    @media (max-height: 700px) {\n      margin-top: -4vh;\n    }\n    @media (max-height: 550px) {\n      margin-top: -2vh;\n    }\n  }\n`;\n\nconst DescriptionField = styled(SharpCallout)`\n  font-size: 19px;\n  height: 38.06vh;\n  max-height: 290px;\n  max-width: 320px;\n  width: 89.7673vw;\n  @media screen and (max-width: 360px) {\n    height: 36.06vh;\n    max-width: 280px;\n    max-height: 240px;\n    font-size: 14px;\n  }\n  @media screen and (max-height: 550px) {\n    font-size: 10px;\n  }\n  @media screen and (max-height: 350px) {\n    font-size: 8px;\n  }\n  .text-wrapper {\n    width: 100%;\n    max-width: 270px;\n    @media screen and (max-width: 360px) {\n      width: 65vw;\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    height: 235px;\n    width: 275px;\n    font-size: 16px;\n    .text-wrapper {\n      width: 230px;\n    }\n    @media (max-height: 700px) {\n      height: 35vh;\n      width: 40vh;\n      font-size: 14px;\n      .text-wrapper {\n        width: 34vh;\n        line-height: 0.9em;\n      }\n    }\n\n    @media (max-height: 500px) {\n      font-size: 12px;\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n  }\n`;\n\nconst MotivationText = styled.p`\n  color: white;\n  margin: -10vh 0 5vh 60%;\n  font-size: 20px;\n  @media screen and (max-height: 550px) {\n    font-size: 15px;\n  }\n  @media screen and (max-height: 350px) {\n    font-size: 12px;\n  }\n  @media screen and (min-height: 850px) {\n    margin-top: -7vh;\n  }\n\n  @media screen and (min-width: 640px) {\n    margin: -65px 0 45px 190px;\n    font-size: 18px;\n    \n    @media (max-height: 700px) {\n        margin: -11vh 0 8vh 25vh;\n        font-size: 16px;\n    }\n     @media (max-height: 550px) {\n        margin: -11vh 0 3vh 25vh;\n        font-size: 14px;\n    }\n    \n  }\n`;\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Intro = () => {\n  return (\n    <Wrapper>\n      <ImageBackground />\n      <ImagesWrapper>\n        <LogoWrapper>\n          <Logo />\n        </LogoWrapper>\n        <ImageWrapper>\n          <Image src={introImage} />\n        </ImageWrapper>\n      </ImagesWrapper>\n      <TitleWrapper>\n        <TestTitleCallout text={\"Правда vs Ложь\"} />\n      </TitleWrapper>\n      <DescriptionField\n        text={\n          \"Ингосстрах собрал для тебя 11 фактов о космической сфере. Угадаешь, какие из них правдивы? Если успешно пройдешь тест, то будут все шансы составить конкуренцию Илону Маску\"\n        }\n      />\n      <MotivationText>Не упусти эту возможность!</MotivationText>\n      <ButtonWrapper>\n        <StartButton text={\"Начать\"} color={ColorTypes.Common} />\n      </ButtonWrapper>\n    </Wrapper>\n  );\n};\n\nexport default Intro;\n","export const AnswerTypes = {\n  Truth: \"Правда\",\n  Falsity: \"Ложь\",\n};\n","import { AnswerTypes } from \"./answerTypes.config\";\n\nexport const questions = [\n  {\n    id: \"1\",\n    text:\n      \"На космическом корабле Crew Dragon в мае 2020 года одним из членов экипажа был игрушечный динозавр\",\n    correct: AnswerTypes.Truth,\n    description: [\n      \"Космонавты часто используют во время полета мягкие игрушки для определения невесомости.\",\n      \"Астронавты NASA выбрали игрушку динозавра, которого назвали Space Dino.\",\n    ],\n  },\n  {\n    id: \"2\",\n    text: \"Человек не может заплакать в космосе\",\n    correct: AnswerTypes.Falsity,\n    description: [\n      \"Заплакать в космосе может каждый.\",\n      \"В невесомости слезы останутся на глазах и лице.\",\n    ],\n  },\n  {\n    id: \"3\",\n    text:\n      \"В комиксах Marvel Тони Старк (Железный человек) планирует первым колонизировать Марс\",\n    correct: AnswerTypes.Falsity,\n    description: [\n      \"Колонизация Марса не входила в планы Тони Старка\",\n      \"Хотя такой план есть у Илона Маска, по образу которого был создан Железный человек.\",\n    ],\n  },\n  {\n    id: \"4\",\n    text:\n      \"По возвращении на Землю космонавты всегда проходят таможенный контроль\",\n    correct: AnswerTypes.Falsity,\n    description: [\n      \"Только однажды экипаж «Аполлона-11» обязали пройти таможенный контроль.\",\n      \"Паспорт, номер рейса, маршрут (Луна — Гонолулу, Гавайи), — всё было указано подробно, вплоть до содержимого «багажа»: 22 килограмма пыли и лунных камней.\",\n    ],\n  },\n  {\n    id: \"5\",\n    text:\n      \"Космический аппарат “Маринет-1” потерпел крушение из-за отсутствия дефиса в коде\",\n    correct: AnswerTypes.Truth,\n    description: [\n      \"В 1962 году «Маринер-1» потерпел аварию через несколько минут после старта.\",\n      \"После отказа антенны выяснилось, что программа содержит ошибку: над одной буквой не было черточки. Её отсутствие поменяло смысл уравнения и привело к крушению.\",\n    ],\n  },\n  {\n    id: \"6\",\n    text: \"Илон Маск застраховал свою ракету Falcon 9 в Ингосстрахе\",\n    correct: AnswerTypes.Truth,\n    description: [\n      \"Ингосстрах был одной из компании, которая страховала запуск первой ступени ракеты-носителя Falcon 9, приземлившейся на морскую платформу Of Course I Still Love You в Атлантике.\",\n      \"Это был первый в мире повторный полет ракеты орбитального класса.\",\n    ],\n  },\n  {\n    id: \"7\",\n    text:\n      \"Международное космическое право запрещает воздвигать и оставлять произведения искусства в космическом пространстве\",\n    correct: AnswerTypes.Falsity,\n    description: [\n      \"На Луне есть единственный памятник — алюминиевая скульптура «Павший астронавт».Фигурка установлена 1 августа 1971 года командиром «Аполлона-15» Дэвидом Скоттом.\",\n    ],\n  },\n  {\n    id: \"8\",\n    text: \"В космосе запрещено связывать себя узами брака\",\n    correct: AnswerTypes.Falsity,\n    description: [\n      \"Космонавт Юрий Маленченко до полета в космос сделал предложение своей девушке. На станции он узнал, что его миссия продлевается\",\n      \"Молодожены решили устроить свадьбу, глядя друг на друга через мониторы.\",\n    ],\n  },\n  {\n    id: \"9\",\n    text:\n      \"Фильм “Гагарин. Первый в космосе” длится ровно 108 минут, как и полет самого Гагарина\",\n    correct: AnswerTypes.Truth,\n    description: [\n      \"Предпремьерный показ состоялся в День космонавтики. \",\n      \"Фильм, снятый кинокомпанией «Кремлин Филмз» при поддержке СПАО «Ингосстрах», получил положительные отзывы со стороны критиков.\",\n    ],\n  },\n  {\n    id: \"10\",\n    text:\n      \"Пока вы проходите этот тест, электромобиль Tesla Roadster бороздит бескрайние космические просторы\",\n    correct: AnswerTypes.Truth,\n    description: [\n      \"В  2018 году сверхтяжёлая ракета, разработанная Space X, одной из компаний Илона Маска, отправила в космос электромобиль Tesla. \",\n      \"Поговаривают, что автомобиль может пробыть в космосе миллиарды лет.\",\n    ],\n  },\n  {\n    id: \"11\",\n    text:\n      \"Ингосстрах — одна из первых компаний, которая начала страховать сферу космоса\",\n    correct: AnswerTypes.Truth,\n    description: [\n      \"Ингосстрах был в числе первых страховых компаний, кто разрабатывал правила страхования космической деятельности.\",\n    ],\n  },\n];\n","import { questions } from \"../questions.config\";\n\nexport const getQuestionById = (id) => {\n  return questions.find((question) => question.id === id);\n};\n","import React, { useContext } from \"react\";\nimport { ProgressContext } from \"../../../contexts/ProgressContext\";\nimport Button from \"./Button\";\n\nconst AnswerButton = (props) => {\n  const { setExplanation, setScore, setAnswer } = useContext(ProgressContext);\n\n  const onExplanation = () => {\n    props.text === props.correct && setScore((prev) => prev + 1);\n    setAnswer(props.text);\n    setTimeout(() => setExplanation(), 300);\n  };\n\n  return (\n    <Button text={props.text} onClick={onExplanation} color={props.color} />\n  );\n};\n\nexport default AnswerButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport QuestionCallout from \"./shared/callouts/QuestionCallout\";\nimport AnswerButton from \"./shared/buttons/AnswerButton\";\nimport { AnswerTypes } from \"../answerTypes.config\";\nimport { ColorTypes } from \"../colorTypes.config\";\n\nconst Wrapper = styled.div`\n  background: #1f49b6;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  height: 100%;\n`;\nconst ImageBackground = styled.div`\n  position: absolute;\n  height: 43%;\n  right: 0;\n  top: 0;\n  left: 0;\n  background-color: white;\n`;\nconst ImageWrapper = styled.div`\n  background: white;\n  display: flex;\n  justify-content: center;\n  height: 43%;\n  width: 100%;\n`;\nconst Image = styled.img`\n  z-index: 0;\n  height: auto;\n  width: 100%;\n`;\n\nconst Question = styled(QuestionCallout)`\n  font-size: 16px;\n  width: 320px;\n  height: 222px;\n  margin-top: -15vh;\n\n  @media screen and (min-height: 750px) {\n    font-size: 18px;\n    margin-top: -10vh;\n  }\n\n  @media screen and (max-width: 320px) {\n    width: 240px;\n    height: 170px;\n  }\n\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n    width: 180px;\n    height: 130px;\n  }\n\n  @media screen and (min-width: 640px) {\n    height: 190px;\n    font-size: 22px;\n    line-height: 0.9em;\n    width: 300px;\n\n    @media (max-height: 700px) {\n      height: 29.5vh;\n      width: 38vh;\n      font-size: 18px;\n    }\n    @media (max-height: 550px) {\n      font-size: 12px;\n    }\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  height: fit-content;\n`;\n\nconst QuestionWrapper = (props) => {\n  const { question, image } = props;\n  return (\n    <Wrapper>\n      <ImageBackground />\n      <ImageWrapper>\n        <Image src={image} />\n      </ImageWrapper>\n      <Question text={question.text} />\n      <ButtonWrapper>\n        <AnswerButton\n          text={AnswerTypes.Truth}\n          correct={question.correct}\n          color={ColorTypes.Truth}\n        />\n        <AnswerButton\n          text={AnswerTypes.Falsity}\n          correct={question.correct}\n          color={ColorTypes.Falsity}\n        />\n      </ButtonWrapper>\n    </Wrapper>\n  );\n};\n\nexport default QuestionWrapper;\n","import React from \"react\";\nimport { question1 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question1 = () => {\n  const question = getQuestionById(\"1\");\n  return <QuestionWrapper question={question} image={question1} />;\n};\n\nexport default Question1;\n","import React from \"react\";\nimport { question2 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question2 = () => {\n  const question = getQuestionById(\"2\");\n  return <QuestionWrapper question={question} image={question2} />;\n};\n\nexport default Question2;\n","import React from \"react\";\nimport { question3 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question3 = () => {\n  const question = getQuestionById(\"3\");\n  return <QuestionWrapper question={question} image={question3} />;\n};\n\nexport default Question3;\n","import React from \"react\";\nimport { question4 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question4 = () => {\n  const question = getQuestionById(\"4\");\n  return <QuestionWrapper question={question} image={question4} />;\n};\n\nexport default Question4;\n","import React from \"react\";\nimport { question5 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question5 = () => {\n  const question = getQuestionById(\"5\");\n  return <QuestionWrapper question={question} image={question5} />;\n};\n\nexport default Question5;\n","import React from \"react\";\nimport { question6 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question6 = () => {\n  const question = getQuestionById(\"6\");\n  return <QuestionWrapper question={question} image={question6} />;\n};\n\nexport default Question6;\n","import React from \"react\";\nimport { question7 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question7 = () => {\n  const question = getQuestionById(\"7\");\n  return <QuestionWrapper question={question} image={question7} />;\n};\n\nexport default Question7;\n","import React from \"react\";\nimport { question8 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question8 = () => {\n  const question = getQuestionById(\"8\");\n  return <QuestionWrapper question={question} image={question8} />;\n};\n\nexport default Question8;\n","import React from \"react\";\nimport { question9 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question9 = () => {\n  const question = getQuestionById(\"9\");\n  return <QuestionWrapper question={question} image={question9} />;\n};\n\nexport default Question9;\n","import React from \"react\";\nimport { question10 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question10 = () => {\n  const question = getQuestionById(\"10\");\n  return <QuestionWrapper question={question} image={question10} />;\n};\n\nexport default Question10;\n","import React from \"react\";\nimport { question11 } from \"../../../constants/images\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport QuestionWrapper from \"../../QuestionWrapper\";\n\nconst Question11 = () => {\n  const question = getQuestionById(\"11\");\n  return <QuestionWrapper question={question} image={question11} />;\n};\n\nexport default Question11;\n","import React from \"react\";\nimport Button from \"./Button\";\nimport styled from \"styled-components\";\nimport { resolve } from \"url\";\nimport { shareImage } from \"../../../constants/images\";\n\nconst StyledButton = styled(Button)`\n  text-align: center;\n  font-size: 20px;\n  text-shadow: 0.5px -0.5px 0px ${(props) => props.color};\n  @media screen and (max-height: 750px) {\n    font-size: 16px;\n  }\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n    @media screen and (max-width: 300px) {\n      font-size: 10px;\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    font-size: 16px;\n    @media (max-height: 700px) {\n      font-size: 12px;\n    }\n  }\n`;\n\nconst ShareButton = (props) => {\n  const url = [\n    window.location.protocol,\n    \"//\",\n    window.location.host,\n    window.location.pathname,\n  ].join(\"\");\n\n  const shareTitle = 'Игосстрах Правда vs ложь #ingosstart_правда_vs_ложь'\n  const image = resolve(url, shareImage);\n  const shareText = `Разбираюсь в космической сфере не хуже Илона Маска 😎 Составишь мне конкуренцию? #ingosstart_правда_vs_ложь\n`;\n  const queryParams = new URLSearchParams();\n  queryParams.append(\"url\", url);\n  queryParams.append(\"title\", shareTitle);\n  queryParams.append(\"image\", image);\n  queryParams.append('description', '#ingosstart_правда_vs_ложь');\n  queryParams.append(\"comment\", shareText);\n\n  const link = `http://vk.com/share.php?${queryParams.toString()}`;\n\n  const onShare = () => {\n    setTimeout(() => window.open(link, \"mywindow\"), 300);\n  };\n\n  return (\n    <form action={link} target=\"_blank\">\n      <StyledButton text={props.text} onClick={onShare} color={props.color} />\n    </form>\n  );\n};\n\nexport default ShareButton;\n","import React, { useContext } from \"react\";\nimport { ProgressContext } from \"../../../contexts/ProgressContext\";\nimport Button from \"./Button\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled(Button)`\n  text-align: center;\n  font-size: 20px;\n  white-space: pre-line;\n  text-shadow: 0.5px -0.5px 0px ${(props) => props.color};\n  @media screen and (max-height: 750px) {\n    font-size: 16px;\n  }\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n    @media screen and (max-width: 300px) {\n      font-size: 10px;\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    font-size: 16px;\n    @media (max-height: 700px) {\n      font-size: 12px;\n    }\n  }\n`;\n\nconst RestartButton = (props) => {\n  const { setScore, setAnswer, setCurrentScreenIndex } = useContext(\n    ProgressContext\n  );\n\n  const onRestart = () => {\n    setTimeout(() => {\n      setScore(0);\n      setAnswer(null);\n      setCurrentScreenIndex(1);\n    }, 300);\n  };\n\n  return (\n    <StyledButton text={props.text} onClick={onRestart} color={props.color} />\n  );\n};\n\nexport default RestartButton;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { questions } from \"../questions.config\";\nimport { ProgressContext } from \"../contexts/ProgressContext\";\nimport SharpCallout from \"./shared/callouts/SharpCallout\";\nimport { ColorTypes } from \"../colorTypes.config\";\nimport ShareButton from \"./shared/buttons/ShareButton\";\nimport RestartButton from \"./shared/buttons/RestartButton\";\nimport checkResult from \"../utils/checkResult\";\n\nconst Wrapper = styled.div`\n  height: 100%;\n  padding: 5vh 0 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: white;\n  font-size: 22px;\n  white-space: pre-line;\n  @media screen and (max-height: 750px) {\n    font-size: 18px;\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 65px;\n  @media screen and (max-height: 750px) {\n    font-size: 55px;\n  }\n  @media screen and (max-height: 550px) {\n    font-size: 35px;\n  }\n`;\nconst Description = styled(SharpCallout)`\n  width: 100%;\n  height: 35.06vh;\n  font-size: 22px;\n  line-height: 1em;\n  margin-top: 4vh;\n  @media screen and (max-height: 750px) {\n    height: 40.06vh;\n    font-size: 18px;\n  }\n\n  @media screen and (max-height: 550px) {\n    font-size: 15px;\n    @media screen and (max-width: 300px) {\n      font-size: 10px;\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 250px;\n    font-size: 16px;\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 13px;\n    }\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n  }\n`;\n\nconst Text = styled.p`\n  margin-top: 7vh;\n  @media screen and (max-height: 550px) {\n    font-size: 16px;\n    margin-top: 5vh;\n    @media screen and (max-width: 300px) {\n      font-size: 12px;\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    @media screen and (max-height: 700px) {\n      font-size: 16px;\n    }\n\n    @media (max-height: 500px) {\n      font-size: 14px;\n    }\n  }\n`;\n\nconst Link = styled.a`\n  color: white;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst Final = () => {\n  const { score } = useContext(ProgressContext);\n  const total = questions.length;\n  const result = checkResult(score);\n\n  const INGOSSTRAKH_VK_LINK = \"https://vk.com/ingosstart\";\n\n  return (\n    <Wrapper>\n      <Title>\n        {score} / {total}\n      </Title>\n      <Description text={result.text} />\n      <result.component text={result.buttonText} color={ColorTypes.Common} />\n      <Text>\n        Еще больше интересных фактов {\"\\n\"} в официальной группе{\" \"}\n        <Link target={\"_blank\"} href={INGOSSTRAKH_VK_LINK}>\n          Ингосстрах VK\n        </Link>\n        .\n      </Text>\n    </Wrapper>\n  );\n};\n\nexport default Final;\n","import ShareButton from \"../components/shared/buttons/ShareButton\";\nimport RestartButton from \"../components/shared/buttons/RestartButton\";\n\nconst MINIMUM_SCORE = 5;\n\nexport default function checkResult(score) {\n  if (score >= MINIMUM_SCORE) {\n    return {\n      text:\n        \"Вау! Ты разбираешься в космической сфере. А сколько фактов знают твои друзья? Поделись достижением на своей страничке в соцсети и участвуй в розыгрыше призов.\",\n      buttonText: \"Поделиться \\n результатом\",\n      component: ShareButton,\n    };\n  } else {\n    return {\n      text:\n        \"Неплохая попытка! Попробуй пройти еще раз, чтобы набрать достаточное количество баллов для участия в розыгрыше призов.\",\n      buttonText: `Попробовать \\n еще раз`,\n      component: RestartButton,\n    };\n  }\n}\n","import React from \"react\";\n\nconst SmoothComment = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"auto\"\n      height=\"auto\"\n      viewBox=\"0 0 606 386\"\n    >\n      <image\n        id=\"Smooth\"\n        data-name=\"Smooth\"\n        width=\"100%\"\n        height=\"100%\"\n        href=\"data:img/png;base64,\"\n      />\n    </svg>\n  );\n};\n\nexport default SmoothComment;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothComment from \"../svg/SmoothComment\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  margin: 0 auto;\n  width: 92vw;\n  max-width: 360px;\n  line-height: 1em;\n  z-index: 1;\n  display: flex;\n  justify-content: center;\n`;\n\nconst CalloutWrapper = styled.div`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  z-index: 2;\n`;\n\nconst TextWrapper = styled.div`\n  position: relative;\n  height: 100%;\n  padding-right: 14%;\n  display: flex;\n  align-items: center;\n  width: 80%;\n  max-width: 300px;\n  text-align: left;\n  z-index: 3;\n  @media screen and (max-width: 360px) {\n    width: 70vw;\n  }\n  @media screen and (max-height: 550px) {\n    width: 55vw;\n    @media screen and (max-width: 300px) {\n      width: 50vw;\n    }\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n`;\n\nconst Text = styled.p`\n  margin-top: -25%;\n`;\n\nconst SmoothCallout = (props) => {\n  return (\n    <Wrapper className={props.className}>\n      <CalloutWrapper>\n        <SmoothComment />\n      </CalloutWrapper>\n      <TextWrapper className={\"text-wrapper\"}>\n        <Text>{props.text}</Text>\n      </TextWrapper>\n    </Wrapper>\n  );\n};\n\nexport default SmoothCallout;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  height: 8.0586vh;\n  width: 18.8vw;\n`;\n\nconst Background = styled.div`\n  position: absolute;\n  height: 8vh;\n  width: 18.5vw;\n  left: 1vw;\n  top: 0.2vw;\n  @media screen and (min-width: 640px) {\n    top: 1px;\n    left: 3px;\n  }\n`;\n\nconst Border = styled.div`\n  position: absolute;\n  height: 8.0586vh;\n  width: 18.8vw;\n  top: 0.11vh;\n  left: 0;\n`;\n\nconst Next = () => {\n  return (\n    <Wrapper>\n      <Background>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"auto\"\n          height=\"100%\"\n          viewBox=\"0 0 117.000000 108.000000\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            fill=\"rgb(255, 255, 255)\"\n            d=\"M52.500,-0.000 C69.708,-0.000 86.823,9.424 95.432,23.632 C100.224,31.539 103.000,40.929 103.000,51.000 C103.000,51.182 103.000,51.365 102.999,51.547 C102.952,64.392 99.233,76.513 91.675,85.861 C82.794,96.845 66.877,104.000 52.500,104.000 C38.336,104.000 21.591,97.616 12.724,87.434 C8.705,82.820 3.518,75.910 2.338,69.469 C1.198,63.244 -0.000,57.523 -0.000,51.000 C-0.000,22.833 25.714,-0.000 52.500,-0.000 Z\"\n          />\n        </svg>\n      </Background>\n      <Border>\n        <svg\n          version=\"1.0\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"auto\"\n          height=\"100%\"\n          viewBox=\"0 0 117.000000 108.000000\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        >\n          <g\n            transform=\"translate(0.000000,108.000000) scale(0.100000,-0.100000)\"\n            fill=\"#000000\"\n            stroke=\"none\"\n          >\n            <path\n              d=\"M382 1060 c-241 -63 -382 -241 -382 -479 1 -165 43 -264 165 -387\n                        131 -132 281 -194 466 -194 118 0 199 23 285 79 111 73 196 184 234 310 25 80\n                        27 233 4 312 -54 184 -187 310 -380 359 -104 27 -289 27 -392 0z m291 -5 c107\n                        -28 187 -83 262 -180 201 -258 123 -605 -167 -743 -162 -78 -302 -81 -440 -11\n                        -54 28 -141 110 -171 163 -66 113 -81 279 -38 406 93 271 326 424 554 365z\"\n            />\n            <path\n              d=\"M465 790 c-18 -29 38 -100 144 -182 l34 -26 -77 -82 c-92 -97 -107\n                        -124 -84 -146 24 -24 49 -11 110 59 86 97 128 157 128 180 0 23 -71 94 -164\n                        163 -58 44 -80 52 -91 34z\"\n            />\n          </g>\n        </svg>\n      </Border>\n    </Wrapper>\n  );\n};\nexport default Next;\n","import React from \"react\";\nimport Next from \"../svg/Next\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  padding: 0;\n`;\n\nconst StyledNext = styled(Next)`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n`;\nconst NextButton = () => {\n  return (\n    <Wrapper>\n      <StyledNext />\n    </Wrapper>\n  );\n};\n\nexport default NextButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"./shared/buttons/Button\";\n\nconst Title = styled(Button)`\n  &:hover {\n    cursor: initial;\n  }\n`;\n\nconst ExplanationTitle = (props) => {\n  return <Title text={props.text} color={props.color} />;\n};\n\nexport default ExplanationTitle;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport NextButton from \"./shared/buttons/NextButton\";\nimport { ProgressContext } from \"../contexts/ProgressContext\";\nimport AnswerButton from \"./shared/buttons/AnswerButton\";\nimport { ColorTypes } from \"../colorTypes.config\";\nimport Next from \"./shared/svg/Next\";\nimport ExplanationTitle from \"./ExplanationTitle\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  height: 100%;\n  padding-top: 5vh;\n`;\n\nconst Background = styled.div`\n  background: ${(props) => props.backgroundColor};\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\nconst ButtonWrapper = styled.div`\n  z-index: 10;\n  display: flex;\n  width: 100%;\n  height: fit-content;\n  justify-content: flex-end;\n  margin-right: 20vw;\n  margin-top: -8vh;\n  @media screen and (min-width: 640px) {\n    margin-right: 45px;\n    @media (max-height: 700px) {\n      margin-right: 0;\n    }\n  }\n`;\n\nconst ExplanationWrapper = (props) => {\n  const { setNext, answer } = useContext(ProgressContext);\n  const isCorrect = answer === props.correct;\n  const color = isCorrect ? ColorTypes.Truth : ColorTypes.Falsity;\n  return (\n    <Wrapper>\n      <Background backgroundColor={color} />\n      <ExplanationTitle text={props.correct} color={color} />\n      {props.children}\n      <ButtonWrapper onClick={setNext}>\n        <Next />\n      </ButtonWrapper>\n    </Wrapper>\n  );\n};\n\nexport default ExplanationWrapper;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SmoothCallout)`\n  font-size: 18px;\n  height: 28.5vh;\n  width: 100vw;\n  @media screen and (max-height: 550px) {\n    font-size: 10px;\n    line-height: 1em;\n  }\n\n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 190px;\n\n    @media (max-height: 700px) {\n      width: 40vh;\n      font-size: 14px;\n      height: 25vh;\n    }\n\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 34vh;\n      }\n    }\n  }\n`;\n\nconst SecondDescription = styled(SharpCallout)`\n  margin-top: 5%;\n  width: 86.6vw;\n  height: 36.6vh;\n  font-size: 18px;\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      font-size: 10px;\n      line-height: 1em;\n    }\n  }\n\n  .text-wrapper {\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 250px;\n\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 14px;\n    }\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n  }\n`;\n\nconst QuestionExplanation1 = () => {\n  const question = getQuestionById(\"1\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n      <SecondDescription text={question.description[1]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation1;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SmoothCallout)`\n  font-size: 18px;\n  height: 28.5vh;\n  width: 100vw;\n  @media screen and (max-height: 550px) {\n    font-size: 10px;\n    line-height: 1em;\n  }\n\n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 190px;\n\n    @media (max-height: 700px) {\n      width: 40vh;\n      font-size: 14px;\n      height: 25vh;\n    }\n\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 34vh;\n      }\n    }\n  }\n`;\n\nconst SecondDescription = styled(SharpCallout)`\n  margin-top: 5%;\n  width: 86.6vw;\n  height: 36.6vh;\n  font-size: 18px;\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      font-size: 10px;\n      line-height: 1em;\n    }\n  }\n\n  .text-wrapper {\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 250px;\n\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 14px;\n    }\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n  }\n`;\n\nconst QuestionExplanation2 = () => {\n  const question = getQuestionById(\"2\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n      <SecondDescription text={question.description[1]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation2;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SmoothCallout)`\n  font-size: 18px;\n  height: 28.5vh;\n  width: 100vw;\n  @media screen and (max-height: 550px) {\n    font-size: 10px;\n    line-height: 1em;\n  }\n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 190px;\n\n    @media (max-height: 700px) {\n      width: 40vh;\n      font-size: 14px;\n      height: 25vh;\n    }\n\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 34vh;\n      }\n    }\n  }\n`;\n\nconst SecondDescription = styled(SharpCallout)`\n  margin-top: 5%;\n  width: 86.6vw;\n  height: 36.6vh;\n  font-size: 18px;\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      font-size: 10px;\n      line-height: 1em;\n    }\n  }\n\n  .text-wrapper {\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 250px;\n\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 14px;\n    }\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n  }\n`;\n\nconst QuestionExplanation3 = () => {\n  const question = getQuestionById(\"3\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n      <SecondDescription text={question.description[1]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation3;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SmoothCallout)`\n  font-size: 18px;\n  height: 28.5vh;\n  width: 100vw;\n  @media screen and (max-height: 550px) {\n    font-size: 10px;\n    line-height: 1em;\n  }\n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 190px;\n\n    @media (max-height: 700px) {\n      width: 40vh;\n      font-size: 14px;\n      height: 25vh;\n    }\n\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 34vh;\n      }\n    }\n  }\n`;\n\nconst SecondDescription = styled(SharpCallout)`\n  margin-top: 5%;\n  width: 86.6vw;\n  height: 36.6vh;\n  font-size: 18px;\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      font-size: 10px;\n      line-height: 1em;\n    }\n  }\n\n  .text-wrapper {\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n  \n   @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 250px;\n\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 14px;\n    }\n    @media (max-height: 550px) {\n     font-size:11px;\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n  }\n`;\n\nconst QuestionExplanation4 = () => {\n  const question = getQuestionById(\"4\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n      <SecondDescription text={question.description[1]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation4;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SmoothCallout)`\n  font-size: 18px;\n  height: 28.5vh;\n  width: 100vw;\n  @media screen and (max-height: 550px) {\n    font-size: 10px;\n    line-height: 1em;\n  }\n  \n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 190px;\n\n    @media (max-height: 700px) {\n      width: 40vh;\n      font-size: 14px;\n      height: 25vh;\n    }\n\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 34vh;\n      }\n    }\n  }\n`;\n\nconst SecondDescription = styled(SharpCallout)`\n  margin-top: 5%;\n  width: 86.6vw;\n  height: 36.6vh;\n  font-size: 18px;\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      font-size: 10px;\n      line-height: 1em;\n    }\n  }\n\n  .text-wrapper {\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n  \n   @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 250px;\n\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 14px;\n    }\n    @media (max-height: 550px) {\n    font-size: 11px;\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n  }\n`;\n\nconst QuestionExplanation5 = () => {\n  const question = getQuestionById(\"5\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n      <SecondDescription text={question.description[1]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation5;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SharpCallout)`\n  width: 100vw;\n  height: 37.5vh;\n  font-size: 14px;\n\n  @media screen and (min-height: 720px) {\n    height: 34.5vh;\n    font-size: 18px;\n  }\n\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media (max-width: 300px) {\n      font-size: 10px;\n      line-height: 1em;\n      @media (max-height: 350px) {\n        font-size: 8px;\n      }\n    }\n  }\n\n  .text-wrapper {\n    width: 70vw;\n    @media screen and (max-width: 360px) {\n      width: 65vw;\n    }\n    @media screen and (max-height: 550px) {\n      width: 53vw;\n    }\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n  \n   @media screen and (min-width: 640px) {\n    width: 320px;\n    height: 270px;\n\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 14px;\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n    @media (max-height: 550px) {\n    font-size: 11px;\n    }\n  }\n`;\n\nconst SecondDescription = styled(SmoothCallout)`\n  font-size: 14px;\n  width: 60.6vw;\n  max-width: 250px;\n  height: 27.6vh;\n  margin: -13vh 0 14vh 31vw;\n\n  @media screen and (min-height: 720px) {\n    width: 72.6vw;\n    height: 36.6vh;\n    font-size: 18px;\n    margin: -32% 0 24% 27%;\n    @media (min-width: 400px) {\n      margin: -14vh 0 14vh 23vw;\n    }\n  }\n\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media (max-width: 300px) {\n      font-size: 10px;\n      line-height: 1em;\n      @media (max-height: 350px) {\n        font-size: 8px;\n      }\n    }\n  }\n\n  .text-wrapper {\n    @media screen and (max-width: 360px) {\n      width: 50vw;\n    }\n    @media screen and (max-height: 550px) {\n      width: 53vw;\n    }\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n  \n  \n  @media screen and (min-width: 640px) {\n    width: 380px;\n    height: 170px;\n    margin: -78px 0 110px 67px;\n    \n    @media (max-height: 700px) {\n        margin: -10vh 0 18vh 15vh;\n      width: 27vh;\n      font-size: 14px;\n      height: 18vh;\n    }\n\n    @media (max-height: 550px) {\n      font-size: 12px;\n      width: 32vh;\n      height: 22vh;\n      .text-wrapper {\n        width: 28vh;\n      }\n    }\n  }\n`;\n\nconst QuestionExplanation6 = () => {\n  const question = getQuestionById(\"6\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n      <SecondDescription text={question.description[1]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation6;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SharpCallout)`\n  width: 100vw;\n  height: 37.5vh;\n  font-size: 14px;\n  margin: 12vh 0 17vh;\n\n  @media screen and (min-height: 720px) {\n    height: 34.5vh;\n    font-size: 18px;\n    margin-bottom: 21vh;\n  }\n\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media (max-width: 300px) {\n      font-size: 10px;\n      line-height: 1em;\n      @media (max-height: 350px) {\n        font-size: 8px;\n      }\n    }\n  }\n\n  .text-wrapper {\n    width: 70vw;\n    @media screen and (max-width: 360px) {\n      width: 65vw;\n    }\n    @media screen and (max-height: 550px) {\n      width: 53vw;\n    }\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    width: 320px;\n    margin: 95px 0;\n\n    @media (max-height: 700px) {\n      margin: 12vh 0;\n      width: 41vh;\n      font-size: 14px;\n      .text-wrapper {\n        width: 32vh;\n      }\n    }\n\n    @media (max-height: 550px) {\n      font-size: 11px;\n    }\n  }\n`;\n\nconst QuestionExplanation7 = () => {\n  const question = getQuestionById(\"7\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation7;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SmoothCallout)`\n  font-size: 18px;\n  height: 28.5vh;\n  width: 100vw;\n  @media screen and (max-height: 550px) {\n    font-size: 10px;\n    line-height: 1em;\n  }\n  \n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 190px;\n\n    @media (max-height: 700px) {\n      width: 40vh;\n      font-size: 14px;\n      height: 25vh;\n    }\n\n    @media (max-height: 550px) {\n      font-size: 11px;\n      .text-wrapper {\n        width: 34vh;\n      }\n    }\n  }\n  \n`;\n\nconst SecondDescription = styled(SharpCallout)`\n  margin-top: 5%;\n  width: 86.6vw;\n  height: 36.6vh;\n  font-size: 18px;\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      font-size: 10px;\n      line-height: 1em;\n    }\n  }\n\n  .text-wrapper {\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n  \n   @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 250px;\n\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 14px;\n    }\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n  }\n`;\n\nconst QuestionExplanation8 = () => {\n  const question = getQuestionById(\"8\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n      <SecondDescription text={question.description[1]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation8;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SmoothCallout)`\n  font-size: 18px;\n  height: 28.5vh;\n  width: 100vw;\n  @media screen and (max-height: 550px) {\n    font-size: 10px;\n    line-height: 1em;\n  }\n   @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 190px;\n\n    @media (max-height: 700px) {\n      width: 40vh;\n      font-size: 14px;\n      height: 25vh;\n    }\n\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 34vh;\n      }\n    }\n  }\n`;\n\nconst SecondDescription = styled(SharpCallout)`\n  margin-top: 5%;\n  width: 86.6vw;\n  height: 36.6vh;\n  font-size: 18px;\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      font-size: 10px;\n      line-height: 1em;\n    }\n  }\n\n  .text-wrapper {\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n  \n  @media screen and (min-width: 640px) {\n    width: 300px;\n    height: 250px;\n\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 14px;\n    }\n    @media (max-height: 550px) {\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n  }\n`;\n\nconst QuestionExplanation9 = () => {\n  const question = getQuestionById(\"9\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n      <SecondDescription text={question.description[1]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation9;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\nimport SharpCallout from \"../../shared/callouts/SharpCallout\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\n\nconst FirstDescription = styled(SharpCallout)`\n  width: 100vw;\n  height: 37.5vh;\n  font-size: 14px;\n\n  @media screen and (min-height: 720px) {\n    height: 34.5vh;\n    font-size: 18px;\n  }\n\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media (max-width: 300px) {\n      font-size: 10px;\n      line-height: 1em;\n      @media (max-height: 350px) {\n        font-size: 8px;\n      }\n    }\n  }\n\n  .text-wrapper {\n    width: 70vw;\n    @media screen and (max-width: 360px) {\n      width: 65vw;\n    }\n    @media screen and (max-height: 550px) {\n      width: 53vw;\n    }\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n  \n   @media screen and (min-width: 640px) {\n    width: 320px;\n    height: 270px;\n\n    @media screen and (max-height: 700px) {\n      width: 40vh;\n      height: 33vh;\n      font-size: 14px;\n      .text-wrapper {\n        width: 33vh;\n      }\n    }\n    @media (max-height: 550px) {\n    font-size: 11px;\n    }\n  }\n`;\n\nconst SecondDescription = styled(SmoothCallout)`\n  font-size: 14px;\n  width: 60.6vw;\n  max-width: 250px;\n  height: 27.6vh;\n  margin: -13vh 0 14vh 31vw;\n\n  @media screen and (min-height: 720px) {\n    width: 72.6vw;\n    height: 36.6vh;\n    font-size: 18px;\n    margin: -32% 0 24% 27%;\n    @media (min-width: 400px) {\n      margin: -14vh 0 14vh 23vw;\n    }\n  }\n\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media (max-width: 300px) {\n      font-size: 10px;\n      line-height: 1em;\n      @media (max-height: 350px) {\n        font-size: 8px;\n      }\n    }\n  }\n\n  .text-wrapper {\n    @media screen and (max-width: 360px) {\n      width: 50vw;\n    }\n    @media screen and (max-height: 550px) {\n      width: 53vw;\n    }\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      padding-right: 7%;\n      width: 43vw;\n    }\n  }\n  \n  @media screen and (min-width: 640px) {\n    width: 380px;\n    height: 170px;\n    margin: -78px 0 110px 67px;\n    \n    @media (max-height: 700px) {\n        margin: -10vh 0 18vh 15vh;\n      width: 27vh;\n      font-size: 14px;\n      height: 18vh;\n    }\n\n    @media (max-height: 550px) {\n      font-size: 12px;\n      width: 32vh;\n      height: 22vh;\n      .text-wrapper {\n        width: 28vh;\n      }\n    }\n  }\n`;\n\nconst QuestionExplanation10 = () => {\n  const question = getQuestionById(\"10\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n      <SecondDescription text={question.description[1]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation10;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { getQuestionById } from \"../../../utils/getQuestionbyId\";\nimport ExplanationWrapper from \"../../ExplanationWrapper\";\nimport SmoothCallout from \"../../shared/callouts/SmoothCallout\";\n\nconst FirstDescription = styled(SmoothCallout)`\n  font-size: 18px;\n  height: 34.5vh;\n  width: 100vw;\n  margin: 12vh 0 17vh;\n\n  @media screen and (max-height: 550px) {\n    font-size: 12px;\n\n    @media (max-width: 300px) {\n      font-size: 10px;\n      line-height: 1em;\n      @media (max-height: 350px) {\n        font-size: 8px;\n      }\n    }\n  }\n  @media screen and (min-height: 720px) {\n    height: 34.5vh;\n    margin-bottom: 21vh;\n  }\n\n  .text-wrapper {\n    width: 70vw;\n    @media screen and (max-width: 360px) {\n      width: 89vw;\n    }\n    @media screen and (max-height: 550px) {\n      width: 77vw;\n      @media (min-width: 360px) {\n        width: 67vw;\n      }\n    }\n    @media screen and (max-width: 300px) and (max-height: 350px) {\n      width: 62vw;\n    }\n\n    @media screen and (min-width: 640px) {\n      width: 250px;\n      @media (max-height: 700px) {\n        width: 34vh;\n      }\n    }\n  }\n\n  @media screen and (min-width: 640px) {\n    margin: 100px 0 120px;\n    height: 250px;\n    width: 300px;\n    .text-wrapper {\n      width: 250px;\n    }\n    @media (max-height: 700px) {\n      width: 41vh;\n      margin: 10vh 0 11vh;\n      font-size: 15px;\n\n      .text-wrapper {\n        width: 34vh;\n      }\n    }\n    @media (max-height: 550px) {\n      font-size: 12px;\n      margin: 2vh 0 8vh;\n    }\n  }\n`;\n\nconst QuestionExplanation11 = () => {\n  const question = getQuestionById(\"11\");\n  return (\n    <ExplanationWrapper correct={question.correct}>\n      <FirstDescription text={question.description[0]} />\n    </ExplanationWrapper>\n  );\n};\n\nexport default QuestionExplanation11;\n","import Intro from \"./components/Intro\";\nimport Question1 from \"./components/questions/Question1/Question1\";\nimport Question2 from \"./components/questions/Question2/Question2\";\nimport Question3 from \"./components/questions/Question3/Question3\";\nimport Question4 from \"./components/questions/Question4/Question4\";\nimport Question5 from \"./components/questions/Question5/Question5\";\nimport Question6 from \"./components/questions/Question6/Question6\";\nimport Question7 from \"./components/questions/Question7/Question7\";\nimport Question8 from \"./components/questions/Question8/Question8\";\nimport Question9 from \"./components/questions/Question9/Question9\";\nimport Question10 from \"./components/questions/Question10/Question10\";\nimport Question11 from \"./components/questions/Question11/Question11\";\nimport Final from \"./components/Final\";\n\nimport {\n  question1,\n  question2,\n  question3,\n  question4,\n  question5,\n  question6,\n  question7,\n  question8,\n  question9,\n  question10,\n  question11,\n  introImage,\n} from \"./constants/images\";\nimport QuestionExplanation1 from \"./components/questions/Question1/QuestionExplanation1\";\nimport QuestionExplanation2 from \"./components/questions/Question2/QuestionExplanation2\";\nimport QuestionExplanation3 from \"./components/questions/Question3/QuestionExplanation3\";\nimport QuestionExplanation4 from \"./components/questions/Question4/QuestionExplanation4\";\nimport QuestionExplanation5 from \"./components/questions/Question5/QuestionExplanation5\";\nimport QuestionExplanation6 from \"./components/questions/Question6/QuestionExplanation6\";\nimport QuestionExplanation7 from \"./components/questions/Question7/QuestionExplanation7\";\nimport QuestionExplanation8 from \"./components/questions/Question8/QuestionExplanation8\";\nimport QuestionExplanation9 from \"./components/questions/Question9/QuestionExplanation9\";\nimport QuestionExplanation10 from \"./components/questions/Question10/QuestionExplanation10\";\nimport QuestionExplanation11 from \"./components/questions/Question11/QuestionExplanation11\";\n\nexport const ScreenType = {\n  Intro: \"intro\",\n  Question: \"question\",\n  Final: \"final\",\n};\n\nexport const screens = [\n  {\n    name: \"intro\",\n    component: Intro,\n    type: ScreenType.Intro,\n    preloadImages: [question1],\n    image: introImage,\n  },\n  {\n    name: \"question-1\",\n    component: Question1,\n    explanation: QuestionExplanation1,\n    type: ScreenType.Question,\n    preloadImages: [question2],\n    image: question1,\n  },\n  {\n    name: \"question-2\",\n    component: Question2,\n    explanation: QuestionExplanation2,\n    type: ScreenType.Question,\n    preloadImages: [question3],\n    image: question2,\n  },\n  {\n    name: \"question-3\",\n    component: Question3,\n    explanation: QuestionExplanation3,\n    type: ScreenType.Question,\n    preloadImages: [question4],\n    image: question3,\n  },\n  {\n    name: \"question-4\",\n    component: Question4,\n    explanation: QuestionExplanation4,\n    type: ScreenType.Question,\n    preloadImages: [question5],\n    image: question4,\n  },\n  {\n    name: \"question-5\",\n    component: Question5,\n    explanation: QuestionExplanation5,\n    type: ScreenType.Question,\n    preloadImages: [question6],\n    image: question5,\n  },\n  {\n    name: \"question-6\",\n    component: Question6,\n    explanation: QuestionExplanation6,\n    type: ScreenType.Question,\n    preloadImages: [question7],\n    image: question6,\n  },\n  {\n    name: \"question-7\",\n    component: Question7,\n    explanation: QuestionExplanation7,\n    type: ScreenType.Question,\n    preloadImages: [question8],\n    image: question7,\n  },\n  {\n    name: \"question-8\",\n    component: Question8,\n    explanation: QuestionExplanation8,\n    type: ScreenType.Question,\n    preloadImages: [question9],\n    image: question8,\n  },\n  {\n    name: \"question-9\",\n    component: Question9,\n    explanation: QuestionExplanation9,\n    type: ScreenType.Question,\n    preloadImages: [question10],\n    image: question9,\n  },\n  {\n    name: \"question-10\",\n    component: Question10,\n    explanation: QuestionExplanation10,\n    type: ScreenType.Question,\n    preloadImages: [question11],\n    image: question10,\n  },\n  {\n    name: \"question-11\",\n    component: Question11,\n    explanation: QuestionExplanation11,\n    type: ScreenType.Question,\n    image: question11,\n  },\n  {\n    name: \"final\",\n    component: Final,\n    type: ScreenType.Final,\n  },\n];\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { preloadImage } from \"../utils/preloadImage\";\nimport { screens } from \"../screens.config\";\nimport { ProgressProvider } from \"../contexts/ProgressContext\";\nimport { iphone } from \"../constants/images\";\n\nconst Wrapper = styled.div`\n  max-width: 400px;\n  height: 100vh;\n  margin: 0 auto;\n  background: #1f49b6;\n  @media screen and (min-width: 640px) {\n    max-height: 770px;\n    background: #fff;\n    width: 51.948vh;\n  }\n`;\nconst Image = styled.img`\n  display: none;\n  @media screen and (min-width: 640px) {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-right: -50%;\n    transform: translate(-50%, -50%);\n    height: 770px;\n    max-height: 100vh;\n    width: 400px;\n    max-width: 51.948vh;\n    display: block;\n    z-index: 100;\n    pointer-events: none;\n  }\n`;\n\nconst ComponentWrapper = styled.div`\n  height: 100%;\n\n  @media screen and (min-width: 640px) {\n    width: 45vh;\n    background: #1f49b6;\n    max-height: 700px;\n    height: 90vh;\n    max-width: 375px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-right: -50%;\n    -webkit-transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n  }\n`;\nexport function ScreenWrapper() {\n  const urlParams = new URLSearchParams(window.location.search);\n  const screenParam = urlParams.get(\"screen\");\n\n  const [currentScreenIndex, setCurrentScreenIndex] = useState(\n    +screenParam || 0\n  );\n  const [isExplanation, setIsExplanation] = useState(false);\n  const [score, setScore] = useState(0);\n  const [answer, setAnswer] = useState(null);\n\n  const { component, explanation, preloadImages, ...screen } =\n    screens[currentScreenIndex] || {};\n\n  const setNext = () => {\n    const canSet = currentScreenIndex < screens.length - 1;\n    if (canSet) {\n      setCurrentScreenIndex(currentScreenIndex + 1);\n      setIsExplanation(false);\n    }\n  };\n\n  const setExplanation = () => {\n    const canSet = currentScreenIndex < screens.length - 1;\n    if (canSet) {\n      setIsExplanation(true);\n    }\n  };\n\n  useEffect(() => {\n    const clears =\n      preloadImages && preloadImages.map((img) => preloadImage(img));\n    return () => clears && clears.forEach((clear) => clear());\n  }, [preloadImages]);\n\n  const Component = isExplanation ? explanation : component || null;\n\n  const progressProviderValue = {\n    screen,\n    score,\n    answer,\n    setAnswer,\n    setNext,\n    setExplanation,\n    setCurrentScreenIndex,\n    setScore,\n  };\n\n  return (\n    <Wrapper>\n      <ProgressProvider value={progressProviderValue}>\n          <Image src={iphone} />\n          <ComponentWrapper>\n            <Component />\n          </ComponentWrapper>\n      </ProgressProvider>\n    </Wrapper>\n  );\n}\n","export const preloadImage = (src) => {\n  const image = document.createElement(\"img\");\n  image.style.position = \"absolute\";\n  image.style.top = \"-9999px\";\n  image.style.left = \"-9999px\";\n  image.src = src;\n\n  document.body.appendChild(image);\n\n  return () => document.body.removeChild(image);\n};\n","import React from \"react\";\nimport { ScreenWrapper } from \"./ScreenWrapper\";\n\nfunction App() {\n  return (\n    <>\n      <ScreenWrapper />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}